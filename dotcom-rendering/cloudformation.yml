AWSTemplateFormatVersion: "2010-09-09"
Description: Frontend rendering service

Parameters:
  Subnets:
    Description: The subnets where rendering instances will run
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: The VPC in which rendering instances will run
    Type: AWS::EC2::VPC::Id
  App:
    Description: Application name
    Type: String
    Default: rendering
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - PROD
      - CODE
    Default: CODE
  Stack:
    Description: Stack name
    Type: String
    Default: frontend
  AMI:
    Description: AMI to use for instances
    Type: AWS::EC2::Image::Id
  NotificationAlarmAction:
    Type: CommaDelimitedList
    Description: (Optional) ARN of action to execute when notification alarms change state
    Default: ''
  LatencyAlarmThreshold:
    Type: String
    Description: (Optional) Latency Threshold in seconds
    Default: '0.5'
  LatencyAlarmPeriod:
    Type: String
    Description: (Optional) Duration in seconds over which the latency is applied
    Default: '60'
  LatencyScalingEvaluationPeriods:
    Type: String
    Description: (Optional) Number of periods over which the latency is compared to the threshold before to scale up
    Default: '1'
  Backend5XXAlarmThreshold:
    Type: String
    Description: (Optional) Max number of errors before the 5XX alarm is triggered
    Default: '100'
  Backend5XXAlarmPeriod:
    Type: String
    Description: (Optional) Duration in seconds before 5XX alarm is triggered
    Default: '60'
  Backend5XXConsecutivePeriod:
    Type: String
    Description: (Optional) Number of consecutive periods the threshold needs to be reached before 5XX alarm is triggered
    Default: '5'
  InstanceType:
    Type: String
    Description: EC2 Instance Type to use for dotcom-rendering
  ELKStream:
    Type: String
    Description: name of the kinesis stream to use to send logs to the central ELK stack
  FrontendConfigKey:
    Description: Parameter store KMS key
    Type: String

Conditions:
    HasLatencyScalingAlarm: !Equals [!Ref Stage, 'PROD']
    HasBackend5XXAlarm: !Equals [!Ref Stage, 'PROD']

Mappings:
  Constants:
    Stack:
      Value: frontend
    App:
      Value: rendering
  StageMap:
    PROD:
      MinCapacity: 9
      MaxCapacity: 36
    CODE:
      MinCapacity: 1
      MaxCapacity: 4

Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP access to the load balancer from within the Guardian (for now)
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Stage
        Value:
          Ref: Stage
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: rendering instance
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        # allow ELB to talk to instance
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        SourceSecurityGroupId:
          Ref: LoadBalancerSecurityGroup
      Tags:
      - Key: Stage
        Value:
          Ref: Stage
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: instance-policy
        PolicyDocument:
          Statement:
          # grant access to the distribution bucket in S3
          - Effect: Allow
            Action: s3:GetObject
            Resource: arn:aws:s3:::aws-frontend-artifacts/*
          - Effect: Allow
            Action:
            - cloudwatch:*
            - logs:*
            Resource: '*'
          - Effect: Allow
            Action:
            - ec2:DescribeTags
            - ec2:DescribeInstances
            - autoscaling:DescribeAutoScalingGroups
            - autoscaling:DescribeAutoScalingInstances
            Resource: '*'
          - Resource: !Ref FrontendConfigKey
            Effect: Allow
            Action:
            - kms:Decrypt
            - kms:DescribeKey
          - Effect: Allow
            Action:
              - ssm:GetParametersByPath
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/frontend/*

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: InstanceRole

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
      - { LoadBalancerPort: 80, InstancePort: 9000, Protocol: HTTP }
      CrossZone: true
      HealthCheck:
        Target: HTTP:9000/_healthcheck
        HealthyThreshold: 2
        UnhealthyThreshold: 10
        Interval: 30
        Timeout: 10
      Subnets:
        Ref: Subnets
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      AccessLoggingPolicy:
        EmitInterval: 5
        Enabled: true
        S3BucketName: gu-elb-logs
        S3BucketPrefix:
          Fn::Join:
          - "/"
          - - ELBLogs
            - Fn::FindInMap: [ Constants, Stack, Value ]
            - Fn::FindInMap: [ Constants, App, Value ]
            - Ref: Stage
      Tags:
      - Key: Stage
        Value:
          Ref: Stage
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: AMI
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      IamInstanceProfile:
        Ref: InstanceProfile
      AssociatePublicIpAddress: true
      UserData:
        'Fn::Base64':
          !Sub |
              #!/bin/bash -ev

              groupadd frontend
              useradd -r -m -s /usr/bin/nologin -g frontend dotcom-rendering
              cd /home/dotcom-rendering

              aws --region eu-west-1 s3 cp s3://aws-frontend-artifacts/frontend/${Stage}/${App}/dist/${App}.zip ./
              unzip -q ${App}.zip -d ${App}

              chown -R dotcom-rendering:frontend ${App}

              cd ${App}

              export TERM=xterm-256color
              export NODE_ENV=production
              export GU_STAGE=${Stage}

              mkdir /var/log/dotcom-rendering
              chown -R dotcom-rendering:frontend /var/log/dotcom-rendering

              /usr/local/node/pm2 start --uid dotcom-rendering --gid frontend dist/frontend.server.js

              /opt/aws-kinesis-agent/configure-aws-kinesis-agent ${AWS::Region} ${ELKStream} /var/log/dotcom-rendering/dotcom-rendering.log

  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs ''
      VPCZoneIdentifier:
        Ref: Subnets
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: !FindInMap [StageMap, !Ref Stage, MinCapacity]
      MaxSize: !FindInMap [StageMap, !Ref Stage, MaxCapacity]
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      LoadBalancerNames:
      - Ref: LoadBalancer
      Tags:
      - Key: Stage
        Value:
          Ref: Stage
        PropagateAtLaunch: true
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
        PropagateAtLaunch: true
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
        PropagateAtLaunch: true

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoscalingGroup
      Cooldown: '120'
      ScalingAdjustment: '-1'

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: PercentChangeInCapacity
      AutoScalingGroupName: !Ref AutoscalingGroup
      Cooldown: '600'
      ScalingAdjustment: '100'

  LatencyScalingAlarm:
    Condition: HasLatencyScalingAlarm
    Properties:
      AlarmDescription: !Sub |
        Scale-Up if latency is greater than ${LatencyAlarmThreshold} seconds over ${LatencyScalingEvaluationPeriods} period(s) of ${LatencyAlarmPeriod} seconds
      Dimensions:
      - Name: LoadBalancerName
        Value: !Ref LoadBalancer
      EvaluationPeriods: !Ref LatencyScalingEvaluationPeriods
      MetricName: Latency
      Namespace: AWS/ELB
      Period: !Ref LatencyAlarmPeriod
      Statistic: Average
      Threshold: !Ref LatencyAlarmThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      OKActions:
      - !Ref ScaleDownPolicy
      AlarmActions:
      - !Ref ScaleUpPolicy
    Type: AWS::CloudWatch::Alarm

  Backend5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasBackend5XXAlarm
    Properties:
      AlarmDescription: !Sub |
        Alarm if 5XX backend errors are greater than ${Backend5XXAlarmThreshold} over last ${Backend5XXAlarmPeriod} seconds
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: LoadBalancerName
        Value: !Ref LoadBalancer
      MetricName: HTTPCode_Backend_5XX
      Namespace: AWS/ELB
      EvaluationPeriods: !Ref Backend5XXConsecutivePeriod
      Period: !Ref Backend5XXAlarmPeriod
      Statistic: Sum
      Threshold: !Ref Backend5XXAlarmThreshold
      AlarmActions: !Ref NotificationAlarmAction
      OKActions: !Ref NotificationAlarmAction

Outputs:
  LoadBalancerUrl:
    Value:
      'Fn::GetAtt':
      - LoadBalancer
      - DNSName
